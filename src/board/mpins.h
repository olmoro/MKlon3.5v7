/*
  Файл    mpins.h
  Проект  Mklon3.5v7
  Порты   ESP32
  pcb:    cpu3.5v7
  29.08.2023
  http://mypractic.ru/urok-5-upravlenie-portami-vvoda-vyvoda-obshhego-naznacheniya-gpio.html :
    Разработчики ESP32 не гарантируют, что после аппаратного сброса микроконтроллера 
  все его выводы установятся в режим ввода-вывода. Поэтому операцию перевода нужных 
  выводов в режим GPIO необходимо делать всегда.

    https://kotyara12.ru/iot/esp32_chips/
      Ограничения выводов ESP32 DevKitС
  Согласно документации, модуль WROOM-32 имеет 34 GPIO. Но, не все контакты можно использовать
  в своих проектах.
    Нельзя использовать GPIO 6-11 (D0, D1, D2, D3, SCK, CMD), так как эти выводы используются
  для доступа к FLASH памяти. Сразу исключайте их из своих проектов, причём это справедливо и 
  при использовании “чистых” модулей. Кстати, на новых модулях ECO V3 (с индексами E) они 
  просто не выведены. Профессиональные разработчики, которые используют эти контакты для 
  подключения своих flash модулей, очень расстроены этим фактом.
    Нельзя использовать порт SERIAL 0: GPIO 1 и GPIO 3 (RX, TX), так как он использован для 
  подключения USB конвертора. Если вам очень необходим “основной” serial – используйте модуль 
  вместо платы.
    Не рекомендуется использовать GPIO 0, так как он используется для прошивки микроконтроллера 
  через UART0. Это основной вывод из так называемых “Strapping Pins” / “Биты обвязки“. ESP32 
  войдет в режим прошивки, когда GPIO 0 удерживается на низком уровне при сбросе. Таким образом, 
  внешняя подтяжка GPIO 0 нарушит работу системы прошивки через UART0. Но его вполне можно 
  использовать для управления нагрузкой, если это крайне необходимо.
    GPIO 2, 5, 12, 15, судя по схеме модуля, на платке никуда не задействованы, но так же 
  помечены как “Strapping Pin Functions” / “Биты обвязки“. Это означает, что состояние этих 
  выводов считывается процессором по время работы системы сброса микроконтроллера (в том числе 
  сброс при включении питания, сброс по сторожевому таймеру RTC и сброс по BrownOut). Защелки 
  на этих выводах удерживают логические уровни до тех пор, пока микропроцессор не будет 
  перезапущен. Биты обвязки настраивают режим загрузки устройства, рабочее напряжение VDD_SDIO 
  и другие начальные настройки системы. Использовать эти выводы можно, но очень осторожно. 
  Возможно придется вытащить плату с модулем или сам модуль из панельки для перепрошивки через 
  последовательный порт.
    – GPIO 0 (повторюсь) должен иметь низкий уровень “0“, чтобы войти в режим загрузки 
      микропрограммы через последовательный порт UART0. Иначе будет использован обычный режим запуска.
    – GPIO 2 должен быть либо оставлен неподключенным/плавающим, либо иметь низкий уровень, чтобы 
      войти в режим загрузки прошивки через UART0.
    – GPIO 5 каким-то образом связан с внешней flash-памятью, хотя лично мне из документации сложно 
      понять, как именно.
    – GPIO 12 управляет напряжением питания внешней flash-памяти. Если установлено значение “1“, 
      напряжение флэш-памяти (VDD_SDIO) составляет 1,8 В вместо 3,3 В по умолчанию. Это может 
      препятствовать прошивке и загрузке, если используется флэш-память 3,3 В, а этот контакт 
      вытянут на высокий уровень, что приводит к физическому отключению флэш-памяти по питанию. 
      Имеет внутреннюю слабую подтяжку к земле, поэтому по умолчанию на данном выводе будет низкий 
      уровень.
    – GPIO 15 управляет отладочными сообщениями при запуске микроконтроллера. Если задано 
      значение “0“, отключаются загрузочные сообщения, распечатываемые загрузчиком. Имеет 
      внутреннюю слабую подтяжку к питанию, поэтому по умолчанию на данном выводе будет высокий 
      уровень.
    – * GPIO 4 так же включен в список GPIO_STRAP, но в настоящее время никак не используется. 
      Поэтому вы можете использовать его по своему желанию абсолютно свободно.
    Если вы используете плату с ESP32-WROWER или ESP32-SOLO-1 на борту, то вы не сможете 
  использовать GPIO 16 и 17, так как они задействованы в QSPI интерфейсе, причём это справедливо 
  и при использовании “чистых” модулей (о чем я писал выше).
    GPIO 34,35,36,39 можно использовать только “на вход”, следовательно, нельзя подключать к ним 
  светодиоды, зуммеры, датчики типа DHT22 и DS18B20 и управлять какой-либо нагрузкой.
*/

#ifndef _MPINS_H_
#define _MPINS_H_

namespace MPins
{
  //                 имя          порт   функция      цепь pcb         примечание
  // Входы
  constexpr char celsius_pin    = 34;   // an       CELSIUS     Порт измерителя температуры
  constexpr char pow_good_pin   = 35;   // in       POW_CH      Порт проверки сетевого питания 

  // Выходы
  constexpr char pwm_fan_pin    = 21;   // out      FAN         Порт управления вентилятором
  constexpr char buz_pin        = 25;   // out      BUZ         Порт управления активным зуммером
  constexpr char ready_pin      = 27;   // out      READY       Порт аппаратного WDT 

  // Выходы управления светодиодами 
  constexpr char led_r_pin      = 26;   // out,pd   LEDR        Порт управления красным светодиодом
  constexpr char led_g_pin      = 33;   // out,pd   LEDG        Порт управления зеленым светодиодом
  constexpr char led_b_pin      = 02;   // out,pd   LEDB        Порт управления синим светодиодом

  // Порты дисплея (справочно)                          Дисплей     
  // constexpr char vspi_sck_pin   = 18;   //          CLK         CLK
  // constexpr char vspi_mosi_pin  = 23;   //          SDI, TDI    SDI
  // constexpr char vspi_miso_pin  = 19;   //          SDO, TDO    SDO
  // constexpr char vspi_ss_pin    = 05;   //          TCS
  // constexpr char lcd_dc_pin     = 15;   //          DC
  // constexpr char lcd_res_pin    = 04;   //          RES
  // constexpr char lcd_cs_pin     = 32;   //          CS      
  // constexpr char lcd_bl_pin     = 14;   //          BL
  // constexpr char lcd_tirq_pin   = 36;   //          PEN
  // constexpr char sd_cs_pin      = 22;   //           -          SCS

  // UART
  constexpr char u2rxd_pin      = 16;   // in       U2RXD       Порт приемника
  constexpr char u2txd_pin      = 17;   // out      U2TXD       Порт передатчика

  // Резерв
  constexpr char io39_pin       = 39;    // Резерв
  constexpr char io12_pin       = 12;    // Резерв 
  constexpr char io13_pin       = 13;    // Резерв 

};

#endif // !_MPINS_H_
